"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var system_constants_1 = require("../../core/common/system.constants");
var loggedin_user_1 = require("../../core/domain/loggedin.user");
require("rxjs/add/operator/map");
var AuthenService = (function () {
    function AuthenService(_http) {
        this._http = _http;
    }
    AuthenService.prototype.login = function (username, password) {
        var body = "userName=" + encodeURIComponent(username) +
            "&password=" + encodeURIComponent(password) +
            "&grant_type=password";
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/x-www-form-urlencoded");
        var options = new http_1.RequestOptions({ headers: headers });
        return this._http.post(system_constants_1.SystemConstants.BASE_API + '/api/oauth/token', body, options).map(function (response) {
            var user = response.json();
            if (user && user.access_token) {
                localStorage.removeItem(system_constants_1.SystemConstants.CURRENT_USER);
                localStorage.setItem(system_constants_1.SystemConstants.CURRENT_USER, JSON.stringify(user));
            }
        });
    };
    AuthenService.prototype.logout = function () {
        localStorage.removeItem(system_constants_1.SystemConstants.CURRENT_USER);
    };
    AuthenService.prototype.isUserAuthenticate = function () {
        var user = localStorage.getItem(system_constants_1.SystemConstants.CURRENT_USER);
        if (user != null)
            return true;
        else
            return false;
    };
    AuthenService.prototype.getLoggedInUser = function () {
        var user;
        if (this.isUserAuthenticate()) {
            var userData = JSON.parse(localStorage.getItem(system_constants_1.SystemConstants.CURRENT_USER));
            user = new loggedin_user_1.LoggedInUser(userData.access_token, userData.username, userData.fullName, userData.email, userData.avatar, userData.roles, userData.permissions);
        }
        else
            user = null;
        return user;
    };
    AuthenService.prototype.checkAccess = function (functionId) {
        var user = this.getLoggedInUser();
        var result = false;
        var permission = JSON.parse(user.permissions);
        var roles = JSON.parse(user.roles);
        var hasPermission = permission.findIndex(function (x) { return x.FunctionId == functionId && x.CanRead == true; });
        if (hasPermission != -1 || roles.findIndex(function (x) { return x == "Admin"; }) != -1) {
            return true;
        }
        else
            return false;
    };
    AuthenService.prototype.hasPermission = function (functionId, action) {
        var user = this.getLoggedInUser();
        var result = false;
        var permission = JSON.parse(user.permissions);
        var roles = JSON.parse(user.roles);
        switch (action) {
            case 'create':
                var hasPermission = permission.findIndex(function (x) { return x.FunctionId == functionId && x.CanCreate == true; });
                if (hasPermission != -1 || roles.findIndex(function (x) { return x == "Admin"; }) != -1)
                    result = true;
                break;
            case 'update':
                var hasPermission = permission.findIndex(function (x) { return x.FunctionId == functionId && x.CanUpdate == true; });
                if (hasPermission != -1 || roles.findIndex(function (x) { return x == "Admin"; }) != -1)
                    result = true;
                break;
            case 'delete':
                var hasPermission = permission.findIndex(function (x) { return x.FunctionId == functionId && x.CanDelete == true; });
                if (hasPermission != -1 || roles.findIndex(function (x) { return x == "Admin"; }) != -1)
                    result = true;
                break;
        }
        return result;
    };
    return AuthenService;
}());
AuthenService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], AuthenService);
exports.AuthenService = AuthenService;
//# sourceMappingURL=data:application/json;base64,