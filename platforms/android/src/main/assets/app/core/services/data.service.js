"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var router_1 = require("@angular/router");
var system_constants_1 = require("./../common/system.constants");
var authen_service_1 = require("./authen.service");
var utility_service_1 = require("./utility.service");
var Observable_1 = require("rxjs/Observable");
// import { Observable } from "rxjs/Rx";
// import "rxjs/add/operator/do";
// import "rxjs/add/operator/map";
var message_constants_1 = require("./../common/message.constants");
var DataService = (function () {
    function DataService(_http, _router, _authenService, _utilityService) {
        this._http = _http;
        this._router = _router;
        this._authenService = _authenService;
        this._utilityService = _utilityService;
        this.headers = new http_1.Headers();
        this.headers.append('Content-Type', 'application/json');
    }
    DataService.prototype.get = function (uri) {
        this.headers.delete("Authorization");
        this.headers.append("Authorization", "Bearer " + this._authenService.getLoggedInUser().access_token);
        return this._http.get(system_constants_1.SystemConstants.BASE_API + uri, { headers: this.headers }).map(this.extractData);
    };
    DataService.prototype.post = function (uri, data) {
        this.headers.delete("Authorization");
        this.headers.append("Authorization", "Bearer " + this._authenService.getLoggedInUser().access_token);
        return this._http.post(system_constants_1.SystemConstants.BASE_API + uri, data, { headers: this.headers }).map(this.extractData);
    };
    DataService.prototype.put = function (uri, data) {
        this.headers.delete("Authorization");
        this.headers.append("Authorization", "Bearer " + this._authenService.getLoggedInUser().access_token);
        return this._http.put(system_constants_1.SystemConstants.BASE_API + uri, data, { headers: this.headers }).map(this.extractData);
    };
    DataService.prototype.delete = function (uri, key, id) {
        this.headers.delete("Authorization");
        this.headers.append("Authorization", "Bearer " + this._authenService.getLoggedInUser().access_token);
        return this._http.delete(system_constants_1.SystemConstants.BASE_API + uri + "/?" + key + "=" + id, { headers: this.headers })
            .map(this.extractData);
    };
    DataService.prototype.deleteWithMultiParams = function (uri, params) {
        this.headers.delete('Authorization');
        this.headers.append("Authorization", "Bearer " + this._authenService.getLoggedInUser().access_token);
        var paramStr = '';
        for (var param in params) {
            paramStr += param + "=" + params[param] + '&';
        }
        return this._http.delete(system_constants_1.SystemConstants.BASE_API + uri + "/?" + paramStr, { headers: this.headers })
            .map(this.extractData);
    };
    DataService.prototype.postFile = function (uri, data) {
        var newHeader = new http_1.Headers();
        newHeader.append("Authorization", "Bearer " + this._authenService.getLoggedInUser().access_token);
        return this._http.post(system_constants_1.SystemConstants.BASE_API + uri, data, { headers: newHeader })
            .map(this.extractData);
    };
    DataService.prototype.extractData = function (res) {
        var body = res.json();
        return body || {};
    };
    DataService.prototype.handleError = function (error) {
        if (error.status == 401) {
            localStorage.removeItem(system_constants_1.SystemConstants.CURRENT_USER);
            alert(message_constants_1.MessageContstants.LOGIN_AGAIN_MSG);
            this._utilityService.navigateToLogin();
        }
        else if (error.status == 403) {
            localStorage.removeItem(system_constants_1.SystemConstants.CURRENT_USER);
            alert(message_constants_1.MessageContstants.FORBIDDEN);
            this._utilityService.navigateToLogin();
        }
        else {
            var errMsg = JSON.parse(error._body).Message;
            alert(errMsg);
            return Observable_1.Observable.throw(errMsg);
        }
    };
    return DataService;
}());
DataService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, router_1.Router, authen_service_1.AuthenService,
        utility_service_1.UtilityService])
], DataService);
exports.DataService = DataService;
//# sourceMappingURL=data:application/json;base64,