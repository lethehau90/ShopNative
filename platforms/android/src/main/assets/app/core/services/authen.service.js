"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var loggedin_user_1 = require("../../core/domain/loggedin.user");
require("rxjs/add/operator/map");
var ApplicationSettings = require("application-settings");
var system_constants_1 = require("../../../app/core/common/system.constants");
var Observable_1 = require("rxjs/Observable");
var AuthenService = (function () {
    function AuthenService(_http) {
        this._http = _http;
    }
    AuthenService.prototype.login = function (username, password) {
        var body = "userName=" + encodeURIComponent(username) +
            "&password=" + encodeURIComponent(password) +
            "&grant_type=password";
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/x-www-form-urlencoded");
        var options = new http_1.RequestOptions({ headers: headers });
        return this._http.post(system_constants_1.SystemConstants.BASE_API + '/api/oauth/token', body, options).map(function (response) {
            var user = response.json();
            if (user && user.access_token) {
                ApplicationSettings.remove(system_constants_1.SystemConstants.CURRENT_USER);
                ApplicationSettings.setString(system_constants_1.SystemConstants.CURRENT_USER, JSON.stringify(user));
            }
            response.json();
        });
    };
    AuthenService.prototype.logout = function () {
        ApplicationSettings.remove(system_constants_1.SystemConstants.CURRENT_USER);
    };
    AuthenService.prototype.handleErrors = function (error) {
        console.log("Error handler");
        console.log(JSON.stringify(error));
        return Observable_1.Observable.throw(error);
    };
    AuthenService.prototype.isUserAuthenticate = function () {
        var user = ApplicationSettings.getString(system_constants_1.SystemConstants.CURRENT_USER);
        if (user != null)
            return true;
        else
            return false;
    };
    AuthenService.prototype.getLoggedInUser = function () {
        var user;
        if (this.isUserAuthenticate()) {
            var userData = JSON.parse(ApplicationSettings.getString(system_constants_1.SystemConstants.CURRENT_USER));
            user = new loggedin_user_1.LoggedInUser(userData.access_token, userData.username, userData.fullName, userData.email, userData.avatar, userData.roles, userData.permissions);
        }
        else
            user = null;
        return user;
    };
    AuthenService.prototype.checkAccess = function (functionId) {
        var user = this.getLoggedInUser();
        var result = false;
        var permission = JSON.parse(user.permissions);
        var roles = JSON.parse(user.roles);
        var hasPermission = permission.findIndex(function (x) { return x.FunctionId == functionId && x.CanRead == true; });
        if (hasPermission != -1 || roles.findIndex(function (x) { return x == "Admin"; }) != -1) {
            return true;
        }
        else
            return false;
    };
    AuthenService.prototype.hasPermission = function (functionId, action) {
        var user = this.getLoggedInUser();
        var result = false;
        var permission = JSON.parse(user.permissions);
        var roles = JSON.parse(user.roles);
        switch (action) {
            case 'create':
                var hasPermission = permission.findIndex(function (x) { return x.FunctionId == functionId && x.CanCreate == true; });
                if (hasPermission != -1 || roles.findIndex(function (x) { return x == "Admin"; }) != -1)
                    result = true;
                break;
            case 'update':
                var hasPermission = permission.findIndex(function (x) { return x.FunctionId == functionId && x.CanUpdate == true; });
                if (hasPermission != -1 || roles.findIndex(function (x) { return x == "Admin"; }) != -1)
                    result = true;
                break;
            case 'delete':
                var hasPermission = permission.findIndex(function (x) { return x.FunctionId == functionId && x.CanDelete == true; });
                if (hasPermission != -1 || roles.findIndex(function (x) { return x == "Admin"; }) != -1)
                    result = true;
                break;
        }
        return result;
    };
    return AuthenService;
}());
AuthenService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], AuthenService);
exports.AuthenService = AuthenService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVuLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhdXRoZW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUEyQztBQUMzQyxzQ0FBdUU7QUFDdkUsaUVBQThEO0FBQzlELGlDQUE4QjtBQUM5QiwwREFBNEQ7QUFDNUQsOEVBQTRFO0FBQzVFLDhDQUE2QztBQUc3QyxJQUFhLGFBQWE7SUFFdEIsdUJBQW9CLEtBQVc7UUFBWCxVQUFLLEdBQUwsS0FBSyxDQUFNO0lBQUksQ0FBQztJQUNwQyw2QkFBSyxHQUFMLFVBQU0sUUFBZ0IsRUFBRSxRQUFnQjtRQUNwQyxJQUFJLElBQUksR0FBRyxXQUFXLEdBQUcsa0JBQWtCLENBQUMsUUFBUSxDQUFDO1lBQ2pELFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLENBQUM7WUFDM0Msc0JBQXNCLENBQUM7UUFFM0IsSUFBSSxPQUFPLEdBQUcsSUFBSSxjQUFPLEVBQUUsQ0FBQTtRQUMzQixPQUFPLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO1FBQ3BFLElBQUksT0FBTyxHQUFHLElBQUkscUJBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxrQ0FBZSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsUUFBa0I7WUFDeEcsSUFBSSxJQUFJLEdBQWlCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxrQ0FBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUN6RCxtQkFBbUIsQ0FBQyxTQUFTLENB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LENBQUMsVUFBVSxJQUFJLFVBQVUsSUFBSSxDQUFDLENBQUMsU0FBUyxJQUFJLElBQUksRUFBakQsQ0FBaUQsQ0FBQyxDQUFDO2dCQUN6RyxFQUFFLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsSUFBSSxPQUFPLEVBQVosQ0FBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2hFLE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLEtBQUssQ0FBQztRQUNkLENBQUM7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxvQkFBQztBQUFELENBQUMsQUF2RkQsSUF1RkM7QUF2RlksYUFBYTtJQUR6QixpQkFBVSxFQUFFO3FDQUdrQixXQUFJO0dBRnRCLGFBQWEsQ0F1RnpCO0FBdkZZLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cCwgSGVhZGVycywgUmVxdWVzdE9wdGlvbnMsIFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCdcbmltcG9ydCB7IExvZ2dlZEluVXNlciB9IGZyb20gJy4uLy4uL2NvcmUvZG9tYWluL2xvZ2dlZGluLnVzZXInXG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCdcbmltcG9ydCAqIGFzIEFwcGxpY2F0aW9uU2V0dGluZ3MgZnJvbSBcImFwcGxpY2F0aW9uLXNldHRpbmdzXCI7XG5pbXBvcnQgeyBTeXN0ZW1Db25zdGFudHMgfSBmcm9tIFwiLi4vLi4vLi4vYXBwL2NvcmUvY29tbW9uL3N5c3RlbS5jb25zdGFudHNcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXV0aGVuU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9odHRwOiBIdHRwKSB7IH1cbiAgICBsb2dpbih1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSB7XG4gICAgICAgIGxldCBib2R5ID0gXCJ1c2VyTmFtZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh1c2VybmFtZSkgK1xuICAgICAgICAgICAgXCImcGFzc3dvcmQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGFzc3dvcmQpICtcbiAgICAgICAgICAgIFwiJmdyYW50X3R5cGU9cGFzc3dvcmRcIjtcblxuICAgICAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKClcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG4gICAgICAgIGxldCBvcHRpb25zID0gbmV3IFJlcXVlc3RPcHRpb25zKHsgaGVhZGVyczogaGVhZGVycyB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2h0dHAucG9zdChTeXN0ZW1Db25zdGFudHMuQkFTRV9BUEkgKyAnL2FwaS9vYXV0aC90b2tlbicsIGJvZHksIG9wdGlvbnMpLm1hcCgocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBsZXQgdXNlcjogTG9nZ2VkSW5Vc2VyID0gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgaWYgKHVzZXIgJiYgdXNlci5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBBcHBsaWNhdGlvblNldHRpbmdzLnJlbW92ZShTeXN0ZW1Db25zdGFudHMuQ1VSUkVOVF9VU0VSKTtcbiAgICAgICAgICAgICAgICBBcHBsaWNhdGlvblNldHRpbmdzLnNldFN0cmluZyhTeXN0ZW1Db25zdGFudHMuQ1VSUkVOVF9VU0VSLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgbG9nb3V0KCkge1xuICAgICAgICBBcHBsaWNhdGlvblNldHRpbmdzLnJlbW92ZShTeXN0ZW1Db25zdGFudHMuQ1VSUkVOVF9VU0VSKTtcbiAgICB9XG5cbiAgICBoYW5kbGVFcnJvcnMoZXJyb3I6IFJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgaGFuZGxlclwiKTtcbiAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoZXJyb3IpKTtcbiAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IpO1xuICAgIH1cblxuICAgIGlzVXNlckF1dGhlbnRpY2F0ZSgpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHVzZXIgPSBBcHBsaWNhdGlvblNldHRpbmdzLmdldFN0cmluZyhTeXN0ZW1Db25zdGFudHMuQ1VSUkVOVF9VU0VSKTtcbiAgICAgICAgaWYgKHVzZXIgIT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldExvZ2dlZEluVXNlcigpOiBhbnkge1xuICAgICAgICBsZXQgdXNlcjogTG9nZ2VkSW5Vc2VyXG4gICAgICAgIGlmICh0aGlzLmlzVXNlckF1dGhlbnRpY2F0ZSgpKSB7XG4gICAgICAgICAgICB2YXIgdXNlckRhdGEgPSBKU09OLnBhcnNlKEFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKFN5c3RlbUNvbnN0YW50cy5DVVJSRU5UX1VTRVIpKTtcbiAgICAgICAgICAgIHVzZXIgPSBuZXcgTG9nZ2VkSW5Vc2VyKHVzZXJEYXRhLmFjY2Vzc190b2tlbixcbiAgICAgICAgICAgICAgICB1c2VyRGF0YS51c2VybmFtZSxcbiAgICAgICAgICAgICAgICB1c2VyRGF0YS5mdWxsTmFtZSxcbiAgICAgICAgICAgICAgICB1c2VyRGF0YS5lbWFpbCxcbiAgICAgICAgICAgICAgICB1c2VyRGF0YS5hdmF0YXIsIHVzZXJEYXRhLnJvbGVzLCB1c2VyRGF0YS5wZXJtaXNzaW9ucyk7XG4gICAgICAgIH0gZWxzZSB1c2VyID0gbnVsbFxuICAgICAgICByZXR1cm4gdXNlclxuICAgIH1cblxuICAgIGNoZWNrQWNjZXNzKGZ1bmN0aW9uSWQ6IHN0cmluZykge1xuICAgICAgICB2YXIgdXNlciA9IHRoaXMuZ2V0TG9nZ2VkSW5Vc2VyKCk7XG4gICAgICAgIHZhciByZXN1bHQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICAgICAgdmFyIHBlcm1pc3Npb246IGFueVtdID0gSlNPTi5wYXJzZSh1c2VyLnBlcm1pc3Npb25zKTtcbiAgICAgICAgdmFyIHJvbGVzOiBhbnlbXSA9IEpTT04ucGFyc2UodXNlci5yb2xlcyk7XG4gICAgICAgIHZhciBoYXNQZXJtaXNzaW9uOiBudW1iZXIgPSBwZXJtaXNzaW9uLmZpbmRJbmRleCh4ID0+IHguRnVuY3Rpb25JZCA9PSBmdW5jdGlvbklkICYmIHguQ2FuUmVhZCA9PSB0cnVlKTtcbiAgICAgICAgaWYgKGhhc1Blcm1pc3Npb24gIT0gLTEgfHwgcm9sZXMuZmluZEluZGV4KHggPT4geCA9PSBcIkFkbWluXCIpICE9IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaGFzUGVybWlzc2lvbihmdW5jdGlvbklkOiBzdHJpbmcsIGFjdGlvbjogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHZhciB1c2VyID0gdGhpcy5nZXRMb2dnZWRJblVzZXIoKTtcbiAgICAgICAgdmFyIHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICB2YXIgcGVybWlzc2lvbjogYW55W10gPSBKU09OLnBhcnNlKHVzZXIucGVybWlzc2lvbnMpO1xuICAgICAgICB2YXIgcm9sZXM6IGFueVtdID0gSlNPTi5wYXJzZSh1c2VyLnJvbGVzKTtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICAgICAgICAgICAgdmFyIGhhc1Blcm1pc3Npb246IG51bWJlciA9IHBlcm1pc3Npb24uZmluZEluZGV4KHggPT4geC5GdW5jdGlvbklkID09IGZ1bmN0aW9uSWQgJiYgeC5DYW5DcmVhdGUgPT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc1Blcm1pc3Npb24gIT0gLTEgfHwgcm9sZXMuZmluZEluZGV4KHggPT4geCA9PSBcIkFkbWluXCIpICE9IC0xKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgICAgICAgICB2YXIgaGFzUGVybWlzc2lvbjogbnVtYmVyID0gcGVybWlzc2lvbi5maW5kSW5kZXgoeCA9PiB4LkZ1bmN0aW9uSWQgPT0gZnVuY3Rpb25JZCAmJiB4LkNhblVwZGF0ZSA9PSB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzUGVybWlzc2lvbiAhPSAtMSB8fCByb2xlcy5maW5kSW5kZXgoeCA9PiB4ID09IFwiQWRtaW5cIikgIT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgICAgIHZhciBoYXNQZXJtaXNzaW9uOiBudW1iZXIgPSBwZXJtaXNzaW9uLmZpbmRJbmRleCh4ID0+IHguRnVuY3Rpb25JZCA9PSBmdW5jdGlvbklkICYmIHguQ2FuRGVsZXRlID09IHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChoYXNQZXJtaXNzaW9uICE9IC0xIHx8IHJvbGVzLmZpbmRJbmRleCh4ID0+IHggPT0gXCJBZG1pblwiKSAhPSAtMSlcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbiJdfQ==