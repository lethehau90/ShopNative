"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var injectableobject_base_1 = require("./injectableobject.base");
var router_1 = require("@angular/router");
var data_service_1 = require("../../core/services/data.service");
var authen_service_1 = require("../../core/services/authen.service");
var utility_service_1 = require("../../core/services/utility.service");
var upload_service_1 = require("../../core/services/upload.service");
//import { CachingService } from '../services/caching.service';
var test_service_1 = require("../../core/services/test.service");
var system_constants_1 = require("../../core/common/system.constants");
var message_constants_1 = require("../../core/common/message.constants");
var url_constants_1 = require("../../core/common/url.constants");
var page_constants_1 = require("../../core/common/page.constants");
var BaseComponent = (function () {
    function BaseComponent(opt) {
        this.opt = opt;
        this._componentName = 'BaseComponent';
        this._dataService = injectableobject_base_1.InjectableObject.injector.get(data_service_1.DataService);
        this._authenService = injectableobject_base_1.InjectableObject.injector.get(authen_service_1.AuthenService);
        this._utilityService = injectableobject_base_1.InjectableObject.injector.get(utility_service_1.UtilityService);
        this._uploadService = injectableobject_base_1.InjectableObject.injector.get(upload_service_1.UploadService);
        //this._cachingService = InjectableObject.injector.get(CachingService);
        this._testService = injectableobject_base_1.InjectableObject.injector.get(test_service_1.TestService);
        this._systemConstants = system_constants_1.SystemConstants;
        this._messageContstants = message_constants_1.MessageContstants;
        this._urlConstants = url_constants_1.UrlConstants;
        this._pageConstants = page_constants_1.PageConstants;
        this._router = injectableobject_base_1.InjectableObject.injector.get(router_1.Router);
        this._activatedRoute = injectableobject_base_1.InjectableObject.injector.get(router_1.ActivatedRoute);
    }
    BaseComponent.prototype.ngOnInit = function () {
        console.log(this.constructor.name + ": OnInit");
        this._componentName = this.constructor.name;
        console.log("start ngOninit: " + this._componentName);
        //console.log(this.opt)
    };
    BaseComponent.prototype.ngOnDestroy = function () {
        //Called once, before the instance is destroyed.
        //Add 'implements OnDestroy' to the class.
        console.log(this.constructor.name + ": OnInit");
        console.log("ngOnDestroy");
        console.log("start ngOninit: " + this._componentName);
        //this.subscription.unsubscribe();
    };
    BaseComponent.prototype.ngOnChanges = function (changes) {
        // Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.
        // Add 'implements OnChanges' to the class.
        // console.log(`${(<any>this).constructor.name}: OnChanges`);
    };
    BaseComponent.prototype.ngDoCheck = function () {
        // tslint:disable-next-line:max-line-length
        // Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.
        // Add 'implements DoCheck' to the class.
        // console.log(`${(<any>this).constructor.name}: DoCheck`);
    };
    BaseComponent.prototype.ngAfterContentChecked = function () {
        // Called after every check of the component's or directive's content.
        // Add 'implements AfterContentChecked' to the class.
        //console.log(`${(<any>this).constructor.name}: AfterContentChecked`);
    };
    BaseComponent.prototype.ngAfterContentInit = function () {
        // Called after ngOnInit when the component's or directive's content has been initialized.
        // Add 'implements AfterContentInit' to the class.
        //console.log(`${(<any>this).constructor.name}: AfterContentInit`);
    };
    return BaseComponent;
}());
exports.BaseComponent = BaseComponent;
//# sourceMappingURL=data:application/json;base64,